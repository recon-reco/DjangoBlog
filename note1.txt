To Do 
- Lengh of Category Name Problem 
>> Done 
- Postを生成・修正の時、カテゴリー追加・削除
- 生成された献立から必要なMainIngredien name List 生成・出力

- Add Ingredient를 클릭하면 empty form이 아니라 이미 생성된 MainIngredient의 form이 복사됨... なせ。。。
- Safari랑 Chrome에서 화면이 묘하게 다르다...

- gmailでSignIn具現
- content에 이미지 넣기 (*content에 markdown 적용되어 있음)


曜日別に生成された献立に必要なMainIngredientテーブルを生成
MainIngredientを追加するAdd Ingredientボタンをクリックすると生成されるフォームを修正
Post生成時、カテゴリ追加機能

ーーDONE--
ー　Navigation Bar test
ー 作成者
ー　カテゴリ
＞　Post List, Post Detailに必要
＞　一つのカテゴリーをクリックしたら、該当カテゴリーページに移動
＞　該当のがてゴリーの全てのポストが出力
＞　Post : Category =  N : 1
** カテゴリー　＞　Post Detail page url Error
＞＞http://127.0.0.1:8000/blog/category/mysql/category/python/
>> http://127.0.0.1:8000/blog/category/mysql/4/
**　Post Detail page : cateory error : badge and category card
>>> sol:     
    def get_absolute_url(self):
        return f'/blog/{self.pk}' <-- "/"blog/{self.pk}
    >> /blog/{self.pk} > domain/blog/{self.pk}
    >> blog/{self.pk} > domain//blog/{self.pk}

ー　Post 登録・修正
> test code : response / soup / title / main_area /
> views.py class PostCreate(CreateView) -> 'form' ->> post_form.html
> templates : base_full_width.html -> post_form.html
> LogInRequiredMixin : authority
> author field : 自動登録

ー　Post 削除

- modal 
＞ pip install django-allauth
settings.py 
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTHENTICATION_BACKENDS=(
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION ='none'
LOGIN_REDIRECT_URL = '/blog/'


requests,pyjwt,cryptography


MIDDLEWARE =
'allauth.account.middleware.AccountMiddleware', 

ー　Tag　機能
ー　markdown適用
ー　Comment 機能
> admin에서 등록한 comment가 post detail에 display
> post detail page에서 comment 작성  > comment 등록 & 웹 페이지에 display
>> Log In -comment form / Log Out - log in modal
>> CommentForm 
>> comment submit -> post.pk/new_comment/ -> views.py : new_comment()

   """##views.new_comment() >>     
    path("<int:pk>/new_comment/", views.new_comment()),
    TypeError: new_comment() missing 2 required positional arguments: 'request' and 'pk'
    """
>> comment 수정 
    
ー　Main Page(Landing Page)

ー　About Me Page 改善
<div class="modal fade" id="deleteCommentModal-{{comment.pk}}" tabindex="-1"role="dialog" aria-labelledby="deleteCommentModalLabel" aria-hidden="true">
<div class="modal-dialog" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="deleteModalLabel">Modal Header</h5>
    
        </div>
        <div class="modal-body">
            <h4>Modal Body!!!</h4>
        </div>
    </div>
応用
ー Docker
1. 도커 설정 파일
> 컨테이너 여러 개를 한 번에 실행시킬 수 있다.
> 컨테이너 실행 시, 옵션을 줄 수 있다.
물론이죠! Dockerfile에 작성된 각 줄의 의미를 하나씩 설명해드리겠습니다.

Dockerfile
코드 복사
# pull official base image
FROM python:3.9.7-alpine
FROM 명령어는 Docker 이미지의 기본이 되는 이미지를 지정합니다. 여기서는 python:3.9.7-alpine 이미지를 사용하고 있습니다. 이 이미지는 Python 3.9.7 버전과 Alpine Linux를 기반으로 합니다. Alpine Linux는 가볍고 보안성이 높은 배포판입니다.
Dockerfile
코드 복사
# set work directory
WORKDIR /user/src/app
WORKDIR 명령어는 작업 디렉토리를 설정합니다. 이후의 모든 명령어는 이 디렉토리 내에서 실행됩니다. 여기서는 /user/src/app 디렉토리를 작업 디렉토리로 설정하고 있습니다.
Dockerfile
코드 복사
# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV 명령어는 환경 변수를 설정합니다. PYTHONDONTWRITEBYTECODE는 Python이 .pyc 파일을 생성하지 않도록 하고, PYTHONUNBUFFERED는 Python의 표준 출력을 버퍼링하지 않도록 설정합니다. 이는 로그를 실시간으로 확인할 수 있게 합니다.
Dockerfile
코드 복사
RUN apk update
RUN apk add postgresql-dev python3-dev musl-dev zlib-dev jpeg-dev
RUN 명령어는 컨테이너 내에서 명령어를 실행합니다. apk update는 Alpine 패키지 인덱스를 업데이트합니다. apk add는 필요한 패키지를 설치합니다. 여기서 postgresql-dev, python3-dev, musl-dev, zlib-dev, jpeg-dev는 PostgreSQL 개발 패키지, Python 개발 패키지, MUSL C 라이브러리 개발 패키지, zlib 압축 라이브러리 개발 패키지, JPEG 이미지 처리 라이브러리 개발 패키지를 설치합니다.
Dockerfile
코드 복사
COPY . /user/src/app
COPY 명령어는 로컬 파일 시스템의 파일 또는 디렉토리를 Docker 이미지의 파일 시스템에 복사합니다. 여기서는 현재 디렉토리(.)의 모든 파일과 디렉토리를 컨테이너의 /user/src/app 디렉토리로 복사합니다.
Dockerfile
코드 복사
# install dependencies
RUN pip install --update pip
RUN pip install -r requirements.txt
RUN 명령어를 사용해 pip 패키지 관리자를 최신 버전으로 업데이트하고, requirements.txt 파일에 명시된 Python 패키지를 설치합니다. requirements.txt 파일은 Python 프로젝트의 의존성을 정의한 파일입니다.
이 Dockerfile은 기본 Python 이미지를 사용해 Python 애플리케이션을 실행할 준비를 하고, 필요한 시스템 및 Python 패키지를 설치한 후 애플리케이션 코드를 컨테이너에 복사하여 최종적으로 의존성을 설치하는 구조입니다.

2. 도커 컴포즈 파일
물론이죠! docker-compose.yml 파일의 각 코드에 대해 설명해드리겠습니다.

yaml
코드 복사
version: '3'
version은 Docker Compose 파일의 형식을 정의합니다. 여기서는 버전 3을 사용하고 있습니다. 이 버전은 Docker Compose의 스키마와 기능을 정의하며, Docker Compose가 이 파일을 읽고 해석하는 방식을 결정합니다.
yaml
코드 복사
services:
  web:
services는 Docker Compose 파일에서 정의하는 서비스들을 나열하는 섹션입니다. 각 서비스는 하나의 컨테이너를 정의합니다. 여기서는 web이라는 이름의 서비스를 정의하고 있습니다.
yaml
코드 복사
  build: .
build는 Docker 이미지가 생성되는 경로를 지정합니다. .는 현재 디렉토리를 의미하며, 이 디렉토리 안의 Dockerfile을 사용하여 이미지를 빌드합니다. 따라서, 현재 디렉토리의 Dockerfile이 사용되어 web 서비스의 이미지를 생성합니다.
yaml
코드 복사
  command: python manage.py runserver 0.0.0.0:8000
command는 컨테이너가 시작될 때 실행될 명령어를 지정합니다. 여기서는 Django 웹 애플리케이션을 실행하기 위한 명령어로, python manage.py runserver 0.0.0.0:8000을 사용하고 있습니다. 이는 Django 서버를 0.0.0.0 IP 주소와 8000 포트에서 실행하도록 합니다.
yaml
코드 복사
  volumes:
    - ./:/user/src/app/
volumes는 호스트 시스템의 디렉토리를 컨테이너의 디렉토리에 마운트합니다. 여기서는 호스트의 현재 디렉토리(./)를 컨테이너의 /user/src/app/ 디렉토리에 마운트합니다. 이렇게 하면 호스트 시스템의 파일과 변경 사항이 컨테이너 내에서도 실시간으로 반영됩니다.
yaml
코드 복사
  ports:
    - 8000:8000
ports는 호스트 시스템의 포트를 컨테이너의 포트에 매핑합니다. 여기서는 호스트의 8000 포트를 컨테이너의 8000 포트에 매핑하고 있습니다. 즉, 호스트의 8000 포트로 접근하면 컨테이너의 8000 포트로 요청이 전달됩니다.
yaml
코드 복사
  env_file:
    - ./.env.dev
env_file은 컨테이너에 환경 변수를 제공하는 파일을 지정합니다. 여기서는 .env.dev 파일을 사용하여 환경 변수를 로드합니다. 이 파일에는 애플리케이션 설정에 필요한 환경 변수들이 정의되어 있을 것입니다.
이 docker-compose.yml 파일은 Django 웹 애플리케이션을 Docker 컨테이너에서 실행하기 위한 설정을 제공합니다. web 서비스는 현재 디렉토리의 Dockerfile을 기반으로 이미지를 빌드하고, Django 서버를 실행하며, 호스트와 컨테이너 간의 파일과 포트를 설정합니다.



apk는 Alpine Linux의 패키지 관리 도구입니다. Alpine Linux는 경량화된 리눅스 배포판으로, apk는 Alpine Linux에서 소프트웨어 패키지를 설치하고 관리하는 데 사용됩니다.

apk 패키지 관리 도구
apk: Alpine Package Keeper의 약자로, Alpine Linux에서 패키지 설치, 제거, 업데이트 등을 관리하는 도구입니다. 다른 리눅스 배포판에서 사용하는 apt (Debian 계열)이나 yum (RedHat 계열)과 유사한 역할을 합니다.
패키지 설명
다음은 Dockerfile에서 설치한 각 패키지에 대한 설명입니다:

PostgreSQL 개발 패키지 (postgresql-dev)

설명: PostgreSQL 데이터베이스의 개발에 필요한 헤더 파일 및 라이브러리 파일을 제공합니다. 주로 PostgreSQL 클라이언트 라이브러리와 함께 C/C++ 애플리케이션에서 PostgreSQL 데이터베이스와 상호작용할 수 있도록 합니다.
용도: Python의 psycopg2와 같은 PostgreSQL 데이터베이스 드라이버를 설치할 때 필요합니다.
Python 개발 패키지 (python3-dev)

설명: Python 개발에 필요한 헤더 파일 및 라이브러리를 포함합니다. 이 패키지는 C 확장 모듈을 컴파일하는 데 필요한 Python 헤더 파일을 제공합니다.
용도: Python 패키지를 설치할 때, 특히 C 확장 모듈을 사용하는 경우 필요합니다. 예를 들어, numpy와 같은 패키지는 C로 작성된 부분이 있어서 이 패키지가 필요합니다.
MUSL C 라이브러리 개발 패키지 (musl-dev)

설명: musl은 Alpine Linux에서 사용하는 C 표준 라이브러리입니다. musl-dev 패키지는 musl의 헤더 파일 및 개발 라이브러리를 포함하고 있습니다.
용도: C 언어로 작성된 애플리케이션을 컴파일할 때 필요한 라이브러리입니다.
zlib 압축 라이브러리 개발 패키지 (zlib-dev)

설명: zlib은 데이터 압축을 위한 라이브러리입니다. zlib-dev 패키지는 zlib의 헤더 파일 및 개발 라이브러리를 제공합니다.
용도: 데이터 압축 및 해제를 수행하는 애플리케이션이나 라이브러리를 개발할 때 필요합니다. 예를 들어, 많은 Python 패키지와 애플리케이션이 이 라이브러리를 사용합니다.
JPEG 이미지 처리 라이브러리 개발 패키지 (jpeg-dev)

설명: JPEG 이미지 포맷을 처리하기 위한 라이브러리입니다. jpeg-dev 패키지는 JPEG 이미지 포맷을 읽고 쓰기 위한 헤더 파일 및 개발 라이브러리를 포함합니다.
용도: JPEG 이미지 포맷을 사용하는 애플리케이션을 개발할 때 필요합니다. Python에서는 Pillow와 같은 이미지 처리 라이브러리가 이 패키지를 사용할 수 있습니다.햣 


- to AWS
- domain 連結　：AWS, HTTPS, social login





+++***+++
migration : Model変更についての記録をDBに反映する。
makemigrations ：Model変更についての記録